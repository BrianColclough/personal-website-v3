---
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import Layout from "../../layouts/Layout.astro";
import MarkdownLayout from "../../layouts/MarkdownLayout.astro";
import { contentfulClient, type BlogEntryRO } from "../../lib/contentful";

export async function getStaticPaths() {
    // Get Contentful posts
    const blogEntries = await contentfulClient.getEntries<BlogEntryRO>({
        content_type: "blogPost",
    });

    const contentfulPaths = blogEntries.items.map((entry) => ({
        params: { slug: entry.fields.slug },
        props: {
            title: entry.fields.title,
            content: documentToHtmlString(entry.fields.content),
            date: new Date(entry.fields.datePosted).toLocaleDateString(),
            source: "contentful" as const,
        },
    }));

    // Try to get markdown posts (will work after server restart)
    let markdownPaths: any[] = [];
    try {
        const { getCollection } = await import("astro:content");
        const markdownEntries = await getCollection("blog");
        markdownPaths = await Promise.all(
            markdownEntries.map(async (entry: any) => {
                const { Content } = await entry.render();
                const slug = entry.data.slug || entry.slug;

                return {
                    params: { slug },
                    props: {
                        title: entry.data.title,
                        date: entry.data.datePosted.toLocaleDateString(),
                        source: "markdown" as const,
                        contentText: entry.body,
                        Content,
                    },
                };
            }),
        );
    } catch (error) {
        console.log(
            "Markdown posts not available yet - restart dev server to enable",
        );
    }

    return [...contentfulPaths, ...markdownPaths];
}

const { title, date, source, content, contentText, Content } = Astro.props;
const { slug } = Astro.params;
const slugString = Array.isArray(slug) ? slug.join("/") : slug;
---

<Layout title={`Brian Colclough | ${title}`} article={true}>
    {
        source === "contentful" ? (
            <MarkdownLayout
                title={title}
                date={date}
                content={content}
                slug={slugString}
                source={source}
            />
        ) : (
            <MarkdownLayout
                title={title}
                date={date}
                slug={slugString}
                content={contentText}
                source={source}
            >
                <Content />
            </MarkdownLayout>
        )
    }
</Layout>
